//
//  LoginViewController.swift
//  Movie Trailer App
//
//  Created Alonso Fabian Orozco Perez on 28/12/20.
//  Copyright Â© 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  Template generated by RocketKOR
//

import UIKit

class LoginViewController: UIViewController
{
    @IBOutlet weak var emailTxt: MTTextField!
    @IBOutlet weak var passwordTxt: MTTextField!
    @IBOutlet weak var loginButton: UIButton!
    
	private var presenter: LoginPresenterProtocol?
    
    private lazy var loadingIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(frame: self.loginButton.bounds)
        indicator.startAnimating()
        return indicator
    }()

	override func viewDidLoad() {
        super.viewDidLoad()
        self.setupPresenter()
        self.configView()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        DispatchQueue.main.async {
            self.emailTxt.becomeFirstResponder()
        }
    }
    
    @IBAction func loginAction(_ sender: UIButton)
    {
        self.presenter?.performLogin(username: emailTxt.text!, password: passwordTxt.text!)
    }
    
    private func configView()
    {
        self.emailTxt.delegate = self
        self.passwordTxt.delegate = self
    }
    
    private func setupPresenter()
    {
        self.presenter = LoginPresenter()
        presenter?.view = self
        presenter?.viewDidLoad()
    }

}

extension LoginViewController: LoginViewProtocol
{
    func onSucessLogin() {
        DispatchQueue.main.async {
            let dashVC: DashboardViewController = MTSbHelper.shared.initVC(storyboard: .Dashboard)
            self.navigationController?.pushViewController(dashVC, animated: true)
        }
    }
    
    func onRequestFailed(error: String) {
        DispatchQueue.main.async {
            MTAlertHelper.showCustomMessage(currentVC: self, message: error)
        }
    }
    
    func showProgress()
    {
        DispatchQueue.main.async {
            self.loginButton.addSubview(self.loadingIndicator)
            self.loginButton.disableButtonAnimated(alpha: 0.3, animated: true)
        }
    }
    
    func hideProgress()
    {
        self.loadingIndicator.removeFromSuperview()
        self.loginButton.enableButtonAnimated()
    }
}

extension LoginViewController: UITextFieldDelegate
{
    func textFieldShouldReturn(_ textField: UITextField) -> Bool {
        if textField == self.emailTxt {
            self.passwordTxt.becomeFirstResponder()
        }else {
            DispatchQueue.main.async {
                textField.resignFirstResponder()
            }
            self.presenter?.performLogin(username: self.emailTxt.text!, password: self.passwordTxt.text!)
        }
        return true
    }
}
